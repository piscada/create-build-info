name: "Create Build Info"
description: "Generates buildInfo.json, CHANGELOG.md, version.inc, and optionally commits the changelog."
author: "Your Name <you@example.com>"
inputs:
  artifact-name:
    description: "Name of the artifact to upload."
    required: true
    type: string
  push-changelog:
    description: "Whether to commit and push the CHANGELOG.md file."
    required: false
    default: false
    type: boolean
outputs:
  gitversion_fullsemver:
    description: "Full semantic version from GitVersion."
    value: ${{ steps.gitversion.outputs.FullSemVer }}
  gitversion_majorminorpatch:
    description: "Major.Minor.Patch version from GitVersion."
    value: ${{ steps.gitversion.outputs.MajorMinorPatch }}
  gitversion_prereleasetag:
    description: "Pre-release tag from GitVersion."
    value: ${{ steps.gitversion.outputs.PreReleaseTag }}
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Ensure full history for GitVersion

    - name: Remove Extra Git Remotes (so we're able to run "act" command locally for test)
      run: |
        remotes=$(git remote)
        for remote in $remotes; do
          if [ "$remote" != "origin" ]; then
            git remote remove "$remote"
            echo "Removed remote: $remote"
          fi
        done
      shell: bash

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: "5.x"

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        additionalArguments: "/output file /outputfile buildInfo.json"

    - name: Save FullSemVer to version.inc
      run: |
        echo "#define Version \"${{ steps.gitversion.outputs.FullSemVer }}\"" > version.inc
        cat version.inc
      shell: bash

    - name: Generate CHANGELOG.md
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Function to generate commits between two tags
        generate_commits() {
          local current_tag=$1
          local previous_tag=$2

          echo "## Version $current_tag" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Commits" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -z "$previous_tag" ]; then
            # If there is no previous tag, list all commits up to HEAD
            git log --pretty=format:'- %s' $current_tag..HEAD >> CHANGELOG.md
          else
            git log --pretty=format:'- %s' $previous_tag..$current_tag >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
        }

        # Get the current version
        current_version="${{ steps.gitversion.outputs.FullSemVer }}"
        previous_tag=$(git describe --tags --abbrev=0 $current_version^)

        # Generate changelog for the current version
        generate_commits "$current_version" "$previous_tag"

        # Get the last 5 tags excluding pre-release tags
        echo "## Previous Versions" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        tags=$(git tag --sort=-creatordate | grep -v "${{ steps.gitversion.outputs.PreReleaseTag }}" | head -n 5)

        for tag in $tags; do
          # Find the previous tag for each tag
          previous=$(git describe --tags --abbrev=0 "$tag^" 2>/dev/null || echo "")

          echo "## Version $tag" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Commits" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -z "$previous" ]; then
            # If there is no previous tag, list all commits up to this tag
            git log --pretty=format:'- %s' "$tag" >> CHANGELOG.md
          else
            git log --pretty=format:'- %s' "$previous".."$tag" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "- [$tag](https://github.com/${{ github.repository }}/releases/tag/$tag)" >> CHANGELOG.md
        done

      shell: bash

    - name: Commit and Push CHANGELOG.md
      if: ${{ inputs.push-changelog == 'true' && github.ref == 'refs/heads/main' }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add CHANGELOG.md buildInfo.json version.inc
        git commit -m "chore: update CHANGELOG.md [skip ci]"
        git push origin main
      shell: bash

    - name: Upload build-info artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          buildInfo.json
          CHANGELOG.md
          version.inc
