name: "Create Build Info"
description: "Generates buildInfo.json, CHANGELOG.md, version.inc, and optionally commits the changelog."
author: "Magnus Gule <magnus.gule@piscada.com>"

inputs:
  artifact-name:
    description: "Name of the artifact to upload."
    required: true
    type: string
  push-changelog:
    description: "Whether to commit and push the `CHANGELOG.md`, `version.inc`, and `buildInfo.json` files."
    required: false
    default: false
    type: boolean

outputs:
  version_fullsemver:
    description: "Full semantic version."
    value: ${{ steps.set-github-output-vars.outputs.version_fullsemver }}
  version_majorminorpatch:
    description: "Major.Minor.Patch version."
    value: ${{ steps.set-github-output-vars.outputs.version_majorminorpatch }}
  version_prereleasetag:
    description: "Pre-release tag."
    value: ${{ steps.set-github-output-vars.outputs.version_prereleasetag }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Ensure full history for versioning

    - name: Remove Extra Git Remotes
      run: |
        remotes=$(git remote)
        for remote in $remotes; do
          if [ "$remote" != "origin" ]; then
            git remote remove "$remote"
            echo "Removed remote: $remote"
          fi
        done
      shell: bash

    - name: Set Version Information
      run: |
        #!/bin/bash
        set -e

        # Get Commit Information
        COMMIT_DATE=$(git show -s --format=%ci)
        COMMIT_ID=$(git rev-parse HEAD)
        SHORT_COMMIT_ID=$(git rev-parse --short HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        RUN_NUMBER=${GITHUB_RUN_NUMBER}

        # Determine Version Information
        # Use the latest tag as the base version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        BASE_VERSION=${LATEST_TAG#v}

        # Extract MAJOR, MINOR, PATCH, and PRE_RELEASE if exists
        IFS='-.' read -r MAJOR MINOR PATCH PRE_RELEASE_LABEL PRE_RELEASE_NUMBER <<< "$BASE_VERSION"

        # Check if BASE_VERSION has pre-release information
        if [[ -n "$PRE_RELEASE_LABEL" && -n "$PRE_RELEASE_NUMBER" ]]; then
          # Increment pre-release number
          PRE_RELEASE_NUMBER=$((PRE_RELEASE_NUMBER + 1))
        else
          # Initialize pre-release label and number
          PRE_RELEASE_LABEL="ci"
          PRE_RELEASE_NUMBER=1
        fi

        # Construct Semantic Version
        FULL_SEMVER="$MAJOR.$MINOR.$PATCH-$PRE_RELEASE_LABEL.$PRE_RELEASE_NUMBER"
        SEMVER="$MAJOR.$MINOR.$PATCH-$PRE_RELEASE_LABEL.$PRE_RELEASE_NUMBER"
        MAJOR_MINOR_PATCH="$MAJOR.$MINOR.$PATCH"

        # Export variables for subsequent steps
        echo "commitdate=$COMMIT_DATE" >> $GITHUB_ENV
        echo "pre_releasenumber=$PRE_RELEASE_NUMBER" >> $GITHUB_ENV
        echo "pre_releaselabel=$PRE_RELEASE_LABEL" >> $GITHUB_ENV
        echo "fullsemver=$FULL_SEMVER" >> $GITHUB_ENV
        echo "FULL_SEMVER=$FULL_SEMVER" >> $GITHUB_ENV  # Ensure uppercase export
        echo "majorminorpatch=$MAJOR_MINOR_PATCH" >> $GITHUB_ENV
        echo "semver=$SEMVER" >> $GITHUB_ENV
        echo "major=$MAJOR" >> $GITHUB_ENV
        echo "minor=$MINOR" >> $GITHUB_ENV
        echo "patch=$PATCH" >> $GITHUB_ENV
        echo "commitid=$COMMIT_ID" >> $GITHUB_ENV
        echo "shortcommitid=$SHORT_COMMIT_ID" >> $GITHUB_ENV
        echo "commitmessage=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "branchname=$BRANCH_NAME" >> $GITHUB_ENV
        echo "runnumber=$RUN_NUMBER" >> $GITHUB_ENV

        # Create buildInfo.json
        cat > buildInfo.json <<EOF
        {
          "CommitDate": "${COMMIT_DATE}",
          "PreReleaseNumber": ${PRE_RELEASE_NUMBER},
          "PreReleaseLabel": "${PRE_RELEASE_LABEL}",
          "FullSemVer": "${FULL_SEMVER}",
          "MajorMinorPatch": "${MAJOR_MINOR_PATCH}",
          "SemVer": "${SEMVER}",
          "Major": ${MAJOR},
          "Minor": ${MINOR},
          "Patch": ${PATCH},
          "CommitId": "${COMMIT_ID}",
          "ShortCommitId": "${SHORT_COMMIT_ID}",
          "CommitMessage": "${COMMIT_MESSAGE}",
          "BranchName": "${BRANCH_NAME}",
          "RunNumber": "${RUN_NUMBER}"
        }
        EOF

        # Display buildInfo.json for debugging
        cat buildInfo.json
      shell: bash

    - name: Save FullSemVer to version.inc
      run: |
        echo "#define Version \"${{ env.fullsemver }}\"" > version.inc
      shell: bash

    - name: Generate CHANGELOG.md
      run: |
        #!/bin/bash
        set -e
        set -x  # Enable verbose logging

        echo "Starting CHANGELOG.md generation..."

        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Function to generate commits between two revisions
        generate_commits() {
          local previous_tag="$1"
          local end_ref="$2"

          echo "-------------------------------"
          echo "Generating commits between:"
          echo "Previous Tag: '$previous_tag'"
          echo "End Reference: '$end_ref'"
          echo "-------------------------------"

          echo "## Version $end_ref" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Commits" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -z "$previous_tag" ]; then
            echo "No previous tag found. Listing all commits up to '$end_ref'."
            if git log --pretty=format:'- %s' "$end_ref" >> CHANGELOG.md; then
              echo "Successfully listed commits up to '$end_ref'."
            else
              echo "Failed to list commits up to '$end_ref'."
              exit 1
            fi
          else
            echo "Listing commits between '$previous_tag' and '$end_ref'."
            if git log --pretty=format:'- %s' "$previous_tag".."$end_ref" >> CHANGELOG.md; then
              echo "Successfully listed commits between '$previous_tag' and '$end_ref'."
            else
              echo "Failed to list commits between '$previous_tag' and '$end_ref'."
              exit 1
            fi
          fi

          echo "" >> CHANGELOG.md
        }

        # Define LATEST_TAG
        LATEST_TAG="$FULL_SEMVER"
        echo "Latest Tag: $LATEST_TAG"

        # Get the previous tag
        previous_tag=$(git describe --tags --abbrev=0 "${LATEST_TAG}^" 2>/dev/null || echo "")
        echo "Previous Tag: '$previous_tag'"

        # Define the end reference as HEAD
        end_ref="HEAD"

        # Generate changelog for the current version
        generate_commits "$previous_tag" "$end_ref"
        echo "After generate_commits"

        # Get the last 5 tags excluding pre-release tags
        echo "## Previous Versions" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        tags=$(git tag --sort=-creatordate | grep -v "ci" | head -n 5) || tags=""
        echo "Retrieved Tags (excluding 'ci' pre-releases):"
        echo "$tags"

        for tag in $tags; do
          # Skip empty tags
          if [ -z "$tag" ]; then
            echo "Encountered an empty tag. Skipping..."
            continue
          fi

          echo "Processing Tag: '$tag'"

          # Find the previous tag for each tag
          previous=$(git describe --tags --abbrev=0 "$tag^" 2>/dev/null || echo "")
          echo "Previous Tag for '$tag': '$previous'"

          echo "## Version $tag" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Commits" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -z "$previous" ]; then
            echo "No previous tag found for '$tag'. Listing all commits up to '$tag'."
            if git log --pretty=format:'- %s' "$tag" >> CHANGELOG.md; then
              echo "Successfully listed commits up to '$tag'."
            else
              echo "Failed to list commits up to '$tag'."
              exit 1
            fi
          else
            echo "Listing commits between '$previous' and '$tag'."
            if git log --pretty=format:'- %s' "$previous".."$tag" >> CHANGELOG.md; then
              echo "Successfully listed commits between '$previous' and '$tag'."
            else
              echo "Failed to list commits between '$previous' and '$tag'."
              exit 1
            fi
          fi

          echo "" >> CHANGELOG.md
          echo "- [$tag](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/$tag)" >> CHANGELOG.md

          echo "Completed processing Tag: '$tag'"
        done

        echo "CHANGELOG.md generation completed successfully."
      shell: bash

    - name: Commit and Push CHANGELOG.md
      if: ${{ inputs.push-changelog == 'true' && github.ref == 'refs/heads/main' }}
      run: |
        #!/bin/bash
        set -e

        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        git add CHANGELOG.md version.inc buildInfo.json

        git commit -m "Update CHANGELOG and build info [skip ci]" || echo "No changes to commit"

        git push origin main
      shell: bash

    - name: Tag the New Version
      if: ${{ inputs.push-changelog == 'true' && github.ref == 'refs/heads/main' }}
      run: |
        #!/bin/bash
        set -e

        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Create a new tag using the uppercase 'FULL_SEMVER' variable
        git tag "$FULL_SEMVER"

        # Push the new tag
        git push origin "$FULL_SEMVER"
      shell: bash

    - name: Set github output variables
      id: set-github-output-vars
      run: |
        echo "version_fullsemver=${{ env.fullsemver }}" >> $GITHUB_OUTPUT
        echo "version_majorminorpatch=${{ env.majorminorpatch }}" >> $GITHUB_OUTPUT
        echo "version_prereleasetag=${{ env.pre_releaselabel }}" >> $GITHUB_OUTPUT

      shell: bash

    - name: Upload build-info artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          buildInfo.json
          CHANGELOG.md
          version.inc
